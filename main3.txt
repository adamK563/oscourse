#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

int main() {
    char *line = NULL;
    size_t n = 0;

    while (1) {
        printf("prompt it up > ");
        //reading line from stdin
        n = getline(&line, &n, stdin);
        line[n - 1] = '\0';

        if (strcmp(line, "leave") == 0)
            break;

        if (strcmp(line, "") != 0) {
            char *arguments[1000] = { NULL };
            int i = 0;

            for (char *s = strtok(line, " "); s; s = strtok(NULL, " ")) {
                arguments[i] = s;
                i++;
            }

            char *path = strdup(getenv("PATH"));
            char *p = strtok(path, ":");

            while (p) {
                char *full_path = malloc(strlen(p) + strlen(arguments[0]) + 2);
                sprintf(full_path, "%s/%s", p, arguments[0]);

                int error = 0;
                pid_t pid = fork();

                if (pid == -1) {
                    perror("fork error");
                    exit(EXIT_FAILURE);
                }

                if (pid == 0) {
                    // child process
                    execv(full_path, arguments);
                    perror("execv error");
                    exit(EXIT_FAILURE);
                } else {
                    // parent process
                    wait(&pid);
                    if (WIFEXITED(pid)) {
                        error = WEXITSTATUS(pid);
                    }
                }

                free(full_path);
                p = strtok(NULL, ":");
            }

            free(path);
            if (p == NULL) {
                printf("Error: command not found\n");
            }
        }
    }

    free(line);
    return 0;
}
